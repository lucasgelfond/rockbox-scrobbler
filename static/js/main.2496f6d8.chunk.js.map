{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","input","output","handleChange","bind","convertText","convertSong","convertTime","event","this","setState","target","value","unixTime","date","Date","dateFormat","song","songArray","split","i","songsArray","finalString","length","String","Container","Row","Col","href","onChange","Button","variant","size","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SA0FeA,EApFf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBATF,EADrB,gDAYE,SAAaI,GACXC,KAAKC,SAAS,CAACT,MAAOO,EAAMG,OAAOC,UAbvC,yBAkBE,SAAYC,GACV,IAAMC,EAAO,IAAIC,KAAgB,IAAXF,GACtB,OAAOG,IAAWF,EAAM,yBApB5B,yBAuBE,SAAYG,GAEV,IAAMC,EAAYD,EAAKE,MAAM,OAC7B,MAAoB,MAAjBD,EAAU,GACJ,GAEM,IAAOA,EAAU,GAAK,IAMrB,MALF,IAAOA,EAAU,GAAK,KAKL,MAJjB,IAAOA,EAAU,GAAK,KAIW,MAH7B,IAAOT,KAAKF,YAAYW,EAAU,IAAM,KAGS,WADlD,IAAOA,EAAU,GAAK,OAlC3C,yBAuCE,WACE,IAEIE,EAFEC,EAAaZ,KAAKT,MAAMC,MAAMkB,MAAM,OACtCG,EAAc,GAElB,IAAIF,EAAI,EAAGA,EAAIC,EAAWE,OAAQH,IAAK,CAElB,KADCX,KAAKH,YAAYkB,OAAOH,EAAWD,OAErDE,EAAcA,EAAc,KAAOb,KAAKH,YAAYkB,OAAOH,EAAWD,MAG1EX,KAAKC,SAAS,CAACR,OAAQoB,MAjD3B,oBAqDE,WACE,OACE,8BACE,cAACG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACA,uBACJ,4JACA,+BACE,yFACA,gIACA,yGAEF,wCAAU,mBAAGC,KAAK,iCAAR,sBAAV,qCAAiG,mBAAGA,KAAK,0DAAR,kBAAjG,wBACA,kQACA,mEACA,0BAAUC,SAAUpB,KAAKN,eACzB,uBACA,cAAC2B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASxB,KAAKJ,YAAlD,iDACA,uBACA,uBACA,kEACA,8BAAMI,KAAKT,MAAME,sBA3EzB,GAAyBgC,aCMVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2496f6d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport dateFormat from 'dateformat';\nimport {Container, Row, Col, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      output: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.convertText = this.convertText.bind(this);\n    this.convertSong = this.convertSong.bind(this);\n    this.convertTime = this.convertTime.bind(this);\n  }\n  handleChange(event) {\n    this.setState({input: event.target.value})\n  }\n  \n  //timestamp in format 2016-01-26 15:35:55\n\n  convertTime(unixTime) {\n    const date = new Date(unixTime * 1000);\n    return dateFormat(date, \"yyyy-mm-dd hh:mm:ss\");\n  }\n\n  convertSong(song) {\n    //massive kudos to Jesselnik for explanation of this https://github.com/Jeselnik/rb-scrobbler\n    const songArray = song.split(/\\t/g);\n    if(songArray[5] === \"S\") { //if track was skipped\n      return \"\";\n    }\n    const artist = \"\\\"\" + songArray[0] + \"\\\"\";\n    const track = \"\\\"\" + songArray[2] + \"\\\"\";\n    const album = \"\\\"\" + songArray[1] + \"\\\"\";\n    const timestamp = \"\\\"\" + this.convertTime(songArray[6]) + \"\\\"\";\n    //duration in seconds \n    const duration = \"\\\"\" + songArray[4] + \"\\\"\";\n    return(artist + \", \" + track + \", \" +  album + \", \"  + timestamp + \", \\\"\\\" , \" + duration)\n    \n\n  }\n  convertText() {\n    const songsArray = this.state.input.split(/\\n/g);\n    let finalString = \"\";\n    let i;\n    for(i = 0; i < songsArray.length; i++) {\n      const currentSong = this.convertSong(String(songsArray[i]));\n      if(currentSong !== \"\") {\n        finalString = finalString + \"\\n\" + this.convertSong(String(songsArray[i]));\n      } \n    }\n    this.setState({output: finalString})\n  }\n \n\n  render() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col>\n            <br></br>\n        <p>Hello, I built this for my own purposes + wanted to get it up quickly so it's ugly/low functionality. Ideas for the future:</p>\n        <ul>\n          <li>redo styling/make everything look pretty / more usable </li>\n          <li>allow it to accept full .scrobbler.log / make it less finicky with newline and where it begins</li>\n          <li>direct last.fm API integration / no reliance on universal scrobbler </li>\n        </ul>\n        <p>Please <a href=\"mailto:lucas_gelfond@brown.edu\">email me</a> or add an issue/pull request the <a href=\"https://github.com/lucasgelfond/react-rockbox-scrobbler\">repo</a> if you have notes</p>\n        <p>Instructions: Copy/paste the text below the #CLIENT line in .scrobbler.log; do not include the newline at the end of the file in your selection. Paste the output into the \"Scrobble Manually in Bulk\" box on UniversalScrobbler.</p>\n        <h1>Text inputted from .scrobbler.log</h1>\n        <textarea onChange={this.handleChange}></textarea>\n        <br></br>\n        <Button variant=\"primary\" size=\"sm\" onClick={this.convertText}>Convert to Universal Scrobbler text</Button>\n        <br></br>\n        <br></br>\n        <h1>Text for the Universal Scrobbler</h1>\n        <pre>{this.state.output}</pre>\n        </Col>\n        </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}